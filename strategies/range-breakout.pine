//@version=6
strategy("Range Breakout + EMA Filter — ATR Stop + 21EMA Exit (Auto-Alerts)",
  overlay=true,
  initial_capital=100000,
  commission_type=strategy.commission.percent,
  commission_value=0.02,                   // Bybit futures taker ≈ 0.055%
  pyramiding=0,
  calc_on_order_fills=true,
  calc_on_every_tick=true)

// ===== Inputs =====
len21        = input.int(21,  "EMA Fast (Filter)", minval=1)
len50        = input.int(50,  "EMA Trend Filter", minval=1)
enableShorts = input.bool(true, "Enable Shorts")

// ===== Trading Mode Settings =====
tradeMode = input.string("Breakout", "Trade Mode", options=["Breakout", "Fade", "Both"])
useHTF = input.bool(false, "Use Higher Timeframe Range")
htfTimeframe = input.timeframe("D", "HTF Timeframe", group="Higher Timeframe")

// ===== Range Detection Settings =====
rangePeriod  = input.int(20, "Range Lookback Period", minval=5, maxval=100)
minRangeATR  = input.float(2.0, "Minimum Range Size (ATR Multiple)", step=0.1)
fadeStretch = input.float(1.0, "Fade Entry ATR Stretch", minval=0.1, maxval=3.0, step=0.1, tooltip="ATR distance beyond range for fade entries")

atrLen       = input.int(14, "ATR Length", minval=1)
atrMultSL    = input.float(2.0, "ATR Stop Multiplier", step=0.1)

useRiskSize  = input.bool(true, "Size by Risk % of Equity")
riskPct      = input.float(0.5, "Risk % per Trade", step=0.1)      // e.g., 0.5 = 0.5%

// ===== Trailing Stop Settings =====
useTrailingStop = input.bool(true, "Use Trailing Stop")
trailMultiplier = input.float(1.5, "Trailing Stop ATR Multiplier", step=0.1)

// ===== Take Profit Settings =====
useTakeProfit = input.bool(false, "Use Take Profit (ATR)")
atrMultTP = input.float(3.0, "ATR Take Profit Multiplier", step=0.1)

// ===== Core calcs =====
ema21 = ta.ema(close, len21)
ema50 = ta.ema(close, len50)
atr   = ta.atr(atrLen)

// ===== HTF Data (for fade strategy) =====
htfHigh = request.security(syminfo.tickerid, htfTimeframe, high[1], lookahead=barmerge.lookahead_on)
htfLow = request.security(syminfo.tickerid, htfTimeframe, low[1], lookahead=barmerge.lookahead_on)
htfEMA = request.security(syminfo.tickerid, htfTimeframe, ta.ema(close, len21)[1], lookahead=barmerge.lookahead_on)

// ===== Range Detection =====
// Use HTF or current timeframe based on settings
rangeHigh = useHTF ? htfHigh : ta.highest(high, rangePeriod)
rangeLow  = useHTF ? htfLow : ta.lowest(low, rangePeriod)
rangeSize = rangeHigh - rangeLow
minRangeSize = minRangeATR * atr

// Valid range check
validRange = rangeSize >= minRangeSize

// ===== Fade Entry Levels =====
fadeLongLevel = rangeLow - (atr * fadeStretch)   // Buy below range (fade breakdown)
fadeShortLevel = rangeHigh + (atr * fadeStretch)  // Sell above range (fade breakout)

// ===== Trailing Stop Variables =====
var float tradeStopLoss = na
var bool stopLossTriggered = false
var bool emaExitTriggered = false
var bool takeProfitTriggered = false
slDistance = atrMultSL * atr
trailDistance = trailMultiplier * atr

// ===== Trend Filters =====
trendUp   = close > ema50 and ema21 > ema50
trendDown = close < ema50 and ema21 < ema50

// Background colors for filter conditions
bgcolor(trendUp ? color.new(color.green, 95) : na)
bgcolor(trendDown ? color.new(color.red, 95) : na)
bgcolor(not trendUp and not trendDown ? color.new(color.gray, 95) : na)

// ===== Breakout Conditions =====
breakoutUp   = close > rangeHigh[1] and validRange
breakoutDown = close < rangeLow[1] and validRange

// ===== Fade Conditions =====
fadeSetupLong = close <= fadeLongLevel and validRange
fadeSetupShort = close >= fadeShortLevel and validRange

// EMA position filters
aboveEMA21 = close > ema21
belowEMA21 = close < ema21

// Combined entry conditions based on trade mode
longBreakout = trendUp and breakoutUp and aboveEMA21
shortBreakout = trendDown and breakoutDown and belowEMA21

// Fade entries (opposite direction - buy weakness, sell strength)
longFade = trendDown and fadeSetupLong and belowEMA21  // Buy when oversold in downtrend
shortFade = trendUp and fadeSetupShort and aboveEMA21   // Sell when overbought in uptrend

// Final triggers based on selected mode
longTrigger = tradeMode == "Breakout" ? longBreakout : 
              tradeMode == "Fade" ? longFade : 
              (longBreakout or longFade)  // "Both" mode

shortTrigger = tradeMode == "Breakout" ? shortBreakout : 
               tradeMode == "Fade" ? shortFade : 
               (shortBreakout or shortFade)  // "Both" mode

// ===== Position sizing (risk %) =====
riskValue  = strategy.equity * (riskPct/100.0)
qtyByRisk  = (not na(slDistance) and slDistance > 0) ? riskValue / slDistance : na
orderQty() =>
    useRiskSize and not na(qtyByRisk) and qtyByRisk > 0 ? qtyByRisk : 1

// ===== Entries =====
canTakeTrade = strategy.position_size == 0 and not na(atr) and not na(ema21)

if canTakeTrade
    // Reset trailing stop before new trade
    tradeStopLoss := na
    
    // LONG ENTRY
    if longTrigger
        strategy.entry("Long", strategy.long, qty=orderQty())
        // Set initial stop loss
        tradeStopLoss := close - slDistance
        
    // SHORT ENTRY  
    if enableShorts and shortTrigger
        strategy.entry("Short", strategy.short, qty=orderQty())
        // Set initial stop loss
        tradeStopLoss := close + slDistance

// ===== Trailing Stop Logic =====
if strategy.position_size > 0
    // LONG POSITION - Update trailing stop
    if useTrailingStop and barstate.isconfirmed
        newLongSL = low - trailDistance
        if newLongSL > tradeStopLoss
            tradeStopLoss := newLongSL
    
    // Check exit conditions for LONG
    if low <= tradeStopLoss and not na(tradeStopLoss)
        stopLossTriggered := true
        emaExitTriggered := false
        takeProfitTriggered := false
    else if useTakeProfit and high >= strategy.position_avg_price + atrMultTP*atr
        takeProfitTriggered := true
        stopLossTriggered := false
        emaExitTriggered := false
    
    // LONG STOP LOSS & TAKE PROFIT
    if useTrailingStop
        if useTakeProfit
            strategy.exit("L-Trail", from_entry="Long", stop=tradeStopLoss, limit=strategy.position_avg_price + atrMultTP*atr)
        else
            strategy.exit("L-Trail", from_entry="Long", stop=tradeStopLoss)
    else
        if useTakeProfit
            strategy.exit("L-Stop", from_entry="Long", stop=strategy.position_avg_price - atrMultSL*atr, limit=strategy.position_avg_price + atrMultTP*atr)
        else
            strategy.exit("L-Stop", from_entry="Long", stop=strategy.position_avg_price - atrMultSL*atr)

if strategy.position_size < 0
    // SHORT POSITION - Update trailing stop  
    if useTrailingStop and barstate.isconfirmed
        newShortSL = high + trailDistance
        if newShortSL < tradeStopLoss
            tradeStopLoss := newShortSL
    
    // Check exit conditions for SHORT
    if high >= tradeStopLoss and not na(tradeStopLoss)
        stopLossTriggered := true
        emaExitTriggered := false
        takeProfitTriggered := false
    else if useTakeProfit and low <= strategy.position_avg_price - atrMultTP*atr
        takeProfitTriggered := true
        stopLossTriggered := false
        emaExitTriggered := false
            
    // SHORT STOP LOSS & TAKE PROFIT
    if useTrailingStop
        if useTakeProfit
            strategy.exit("S-Trail", from_entry="Short", stop=tradeStopLoss, limit=strategy.position_avg_price - atrMultTP*atr)
        else
            strategy.exit("S-Trail", from_entry="Short", stop=tradeStopLoss)
    else
        if useTakeProfit
            strategy.exit("S-Stop", from_entry="Short", stop=strategy.position_avg_price + atrMultSL*atr, limit=strategy.position_avg_price - atrMultTP*atr)
        else
            strategy.exit("S-Stop", from_entry="Short", stop=strategy.position_avg_price + atrMultSL*atr)

// ===== EMA trailing exit =====
exitLong  = strategy.position_size > 0 and close < ema21
exitShort = strategy.position_size < 0 and close > ema21
if exitLong
    emaExitTriggered := true
    stopLossTriggered := false
    strategy.close("Long")
if exitShort
    emaExitTriggered := true
    stopLossTriggered := false
    strategy.close("Short")

// Reset triggers when no position
if strategy.position_size == 0
    stopLossTriggered := false
    emaExitTriggered := false
    takeProfitTriggered := false

// ===== Visuals =====
// EMAs
plot(ema21, "EMA 21", color=color.white, linewidth=1)
plot(ema50, "EMA 50", color=color.gray, linewidth=1)

// HTF/Range High and Low
newPeriod = useHTF ? ta.change(time(htfTimeframe)) != 0 : false
plot(newPeriod ? na : rangeHigh, "Range High", color=color.yellow, linewidth=2, style=plot.style_linebr)
plot(newPeriod ? na : rangeLow, "Range Low", color=color.blue, linewidth=2, style=plot.style_linebr)

// Draw stops & targets when in position
plot(strategy.position_size > 0 ? tradeStopLoss : na, color=color.red, style=plot.style_linebr, title="Long Stop")
plot(strategy.position_size > 0 and useTakeProfit ? strategy.position_avg_price + atrMultTP*atr : na, color=color.green, style=plot.style_linebr, title="Long Target")
plot(strategy.position_size < 0 ? tradeStopLoss : na, color=color.red, style=plot.style_linebr, title="Short Stop")
plot(strategy.position_size < 0 and useTakeProfit ? strategy.position_avg_price - atrMultTP*atr : na, color=color.green, style=plot.style_linebr, title="Short Target")

// Draw pending entry levels (gray lines for fade entries)
showFadeLevels = tradeMode != "Breakout" and strategy.position_size == 0
plot(showFadeLevels and not newPeriod ? fadeLongLevel : na, "Long Entry Price", color=color.gray, style=plot.style_linebr)
plot(showFadeLevels and not newPeriod ? fadeShortLevel : na, "Short Entry Price", color=color.gray, style=plot.style_linebr)

// Remove entry signal markers - let the actual trades show on the chart
// The strategy tester will show entry/exit arrows automatically

// ===== Human-readable alerts (optional) =====
alertcondition(longTrigger,  title="Long Breakout",  message="Long: Range breakout above EMA21")
alertcondition(exitLong,     title="Long Exit",   message="Long exit: Close below 21 EMA")
alertcondition(shortTrigger, title="Short Breakout", message="Short: Range breakdown below EMA21")
alertcondition(exitShort,    title="Short Exit",  message="Short exit: Close above 21 EMA")

// ===== Automated Webhook Alerts to Cloudflare =====
tvToken = "k9P$Xz83!vW@b12N#rTe"   // must match WEBHOOK_SECRET in Worker
acctKey = "FTMO"

// Risk sent as USD-equivalent; EA converts to lots
_rv     = strategy.equity * (riskPct/100.0)
_slDist = atrMultSL * atr
qtyUSD  = (not na(_slDist) and _slDist > 0) ? math.round(_rv / _slDist) : 0

mkMsg(evt, side, slPrice) =>
    // build JSON string safely over multiple lines
    s = '{"token":"' + tvToken + '",'
    s += '"account":"' + acctKey + '",'
    s += '"event":"' + evt + '",'
    s += '"symbol":"' + syminfo.ticker + '",'
    s += '"side":"' + side + '",'
    s += '"qty_usd":' + str.tostring(qtyUSD) + ','
    s += '"sl":' + str.tostring(slPrice, "#.####") + ','
    s += '"price":' + str.tostring(close, "#.####") + ','
    s += '"atr":' + str.tostring(atr, "#.####") + ','
    s += '"magic":123457,'  // Different magic number for breakout strategy
    s += '"tag":"Range-' + tradeMode + '",'
    s += '"oid":"' + str.tostring(time) + '-' + evt + '-' + side + '",'
    s += '"ts":' + str.tostring(time) + '}'
    s

// Triggers (one alert per bar close)
newLong    = longTrigger  and strategy.position_size <= 0
newShort   = shortTrigger and strategy.position_size >= 0
closeLong  = exitLong
closeShort = exitShort

// Use current close for pre-entry SL reference
// Ensure SL values are properly formatted with correct decimal places
if newLong
    slPrice = math.round((close - (atrMultSL*atr)) * 10000) / 10000  // SL below price for BUY
    alert(mkMsg("entry","BUY", slPrice),  alert.freq_once_per_bar_close)
if newShort
    slPrice = math.round((close + (atrMultSL*atr)) * 10000) / 10000  // SL above price for SELL
    alert(mkMsg("entry","SELL", slPrice),  alert.freq_once_per_bar_close)

// Exits just flatten; SL not needed
if closeLong
    alert(mkMsg("exit","SELL", 0.0), alert.freq_once_per_bar_close)
if closeShort
    alert(mkMsg("exit","BUY", 0.0), alert.freq_once_per_bar_close)